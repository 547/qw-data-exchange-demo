/**
 * 引用 iOS 系统库，示例如下：
 * import { UIDevice } from "UIKit";
 * [可选实现，按需引入]
 */

/* 引入 interface.uts 文件中定义的变量 */
import { DataExchangeApiOptions, DataListener, DataExchangeCallback, PostData, ListenData, RemoveDataListener, RemoveDataListeners } from '../interface.uts';
/**
 * 发送数据给原生
 */
export const postData : PostData = function (options : DataExchangeApiOptions) {
	DataExchangeDataPoster.post(options.name, options.data);
}
/**
 * 监听原生发来的数据 callback 只能触发一次
 */
export const listenData : ListenData = function (name : string, callback : DataExchangeCallback) : DataListener {
	const listener = new DataExchangeDataListener();
	listener.listen(name, callback);
	return listener;
}
/**
 * 监听原生发来的数据 callback 可持续触发
 */
@UTSJS.keepAlive
export function listen(name : string, callback : DataExchangeCallback) : DataListener {
	const listener = new DataExchangeDataListener();
	listener.listen(name, callback);
	return listener;
}
/**
 * 移除对原生某个消息的监听
 */
export const removeDataListener : RemoveDataListener = function (listener : DataListener, name : string) {
	const uniappDataListener = listener as DataExchangeDataListener;
	uniappDataListener.removeListener(name);
}
/**
 * 移除对listener所有的监听
 */
export const removeDataListeners : RemoveDataListeners = function (listener : DataListener) {
	const uniappDataListener = listener as DataExchangeDataListener;
	uniappDataListener.removeListeners();
}


export class DataExchangeDataListener implements DataListener {
	private callback ?: DataExchangeCallback;
	private notificationListener = new NotificationListener();
	/**
	 * 监听原生发送的消息
	 */
	@UTSJS.keepAlive
	listen(name : string, callback : DataExchangeCallback) : void {
		this.callback = callback;
		this.notificationListener.listen(name = name, callback = (data : Map<string, any>) => {
			this.callback?.(data);
		})
	}
	/**
	 * 移除对name的监听
	 */
	removeListener(name : string) : void {
		this.notificationListener.removeListener(name = name)
	}
	/**
	 * 移除当前监听者对所有消息的监听
	 */
	removeListeners() : void {
		this.notificationListener.removeListener()
	}
}
export class DataExchangeDataPoster {
	/**
	 * 发送数据给原生
	 */
	static post(name : string, data : Map<string, any>) : void {
		NotificationPoster.post(name = name, data = data)
	}
}