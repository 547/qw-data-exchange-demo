
import { DataExchangeApiOptions, DataListener, DataExchangeCallback, PostData } from '../interface.uts';
/**
 * 发送数据
 */
export const postData : PostData = function (options : DataExchangeApiOptions) {
	DataExchangeDataPoster.post(options.name, options.data);
}
/**
 * 监听发来的数据 callback 可持续触发
 */
@UTSJS.keepAlive
export function listen(name : string, callback : DataExchangeCallback) : DataListener {
	const listener = new DataExchangeDataListener();
	listener.listen(name, callback);
	return listener;
}


export class DataExchangeDataListener implements DataListener {
	private callback : DataExchangeCallback | null = null;
	private notificationListener : DataExchangeNotificationListener | null = null;
	/**
	 * 监听指定的消息
	 */
	@UTSJS.keepAlive
	listen(name : string, callback : DataExchangeCallback) : void {
		console.debug("添加对" + name + "的监听")
		this.callback = callback;
		this.notificationListener = new DataExchangeNotificationListener();
		this.notificationListener?.listen(name = name, callback = (data : Map<string, any>) => {
			this.callback?.(data);
		})
	}
	/**
	 * 移除对name的监听
	 */
	removeListenerWithName(name : string) : void {
		console.debug("移除当前监听者对" + name + "的监听")
		this.notificationListener?.removeListener(name = name)
	}
	/**
	 * 移除当前监听者对所有消息的监听
	 */
	removeListener() : void {
		console.debug("移除当前监听者对所有消息的监听")
		this.notificationListener?.removeListener()
		this.notificationListener = null
		this.callback = null
	}
}
export class DataExchangeDataPoster {
	/**
	 * 发送数据
	 */
	static post(name : string, data : Map<string, any>) : void {
		DataExchangeNotificationPoster.post(name = name, data = data)
	}
}