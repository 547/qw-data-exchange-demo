import BroadcastReceiver from 'android.content.BroadcastReceiver'
import Context from 'android.content.Context'
import Intent from 'android.content.Intent'
import IntentFilter from 'android.content.IntentFilter'
import Build from 'android.os.Build'
import Bundle from 'android.os.Bundle'
import { DataExchangeApiOptions, DataListener, DataExchangeCallback, DataExchangeAndroidCallback, PostData } from '../interface.uts';
/**
 * 发送数据
 */
export const postData : PostData = function (options : DataExchangeApiOptions) {
	DataExchangeDataPoster.post(options.name, options.data)
}
/**
 * 监听发来的数据 callback 可持续触发
 */
@UTSJS.keepAlive
export function listen(name : string, callback : DataExchangeCallback) : DataListener {
	const dataExchangeDataListener = new DataExchangeDataListener();
	dataExchangeDataListener.listen(name, callback)
	return dataExchangeDataListener
}



export class DataExchangeDataListener implements DataListener {
	private callback : DataExchangeCallback | null = null;
	private reciver : DataExchangeReciver | null = null;
	private context : Activity | null = null;

	/**
	 * 监听原生发送的消息
	 */
	@UTSJS.keepAlive
	listen(name : string, callback : DataExchangeCallback) : void {
		console.debug("添加对" + name + "的监听")
		this.callback = callback;
		this.registerReceiver(name, (_context : any, intent : any) => {
			const intentValue = intent as Intent
			const action = intentValue.getAction()
			if (action.equals(name)) {
				const data = this.intentExtrasToMap(intentValue)
				this.callback?.(data)
			}
		})
	}
	/**
	 * 移除对name的监听
	 */
	removeListenerWithName(name : string) : void {
		this.removeListener()
	}
	/**
	 * 移除当前监听者
	 */
	removeListener() : void {
		console.debug("移除当前监听者对所有消息的监听")
		if (this.reciver != null && this.context != null) {
			this.context!.unregisterReceiver(this.reciver!)
		}
		this.reciver = null
		this.callback = null
	}
	/**
	 * 注册广播接收器
	 */
	@UTSJS.keepAlive
	private registerReceiver(name : string, callback : DataExchangeAndroidCallback) : void {
		const context = UTSAndroid.getUniActivity()
		if (context != null) {
			this.context = context
			this.reciver = new DataExchangeReciver(callback)
			const intentFilter = IntentFilter(name)
			if (Build.VERSION.SDK_INT >= 33) {
				context.registerReceiver(this.reciver!, intentFilter, Context.RECEIVER_EXPORTED)
			} else {
				context.registerReceiver(this.reciver!, intentFilter)
			}
		} else {
			console.error("注册BroadcastReceiver失败,没有获取到context")
		}
	}
	/**
	 * 将Intent的Extras转成map
	 */
	private intentExtrasToMap(intent : Intent) : Map<string, any> {
		const bundle = intent.getExtras()
		return this.bundleToMap(bundle)
	}
	/**
	 * 将bundle转成map
	 */
	private bundleToMap(bundle : Bundle) : Map<string, any> {
		const map = new Map<string, any>();
		bundle.keySet().forEach((value : any, key : string, _set : Set<any>) => {
			map.set(key, value);
		})
		return map
	}
}
export class DataExchangeReciver extends BroadcastReceiver {
	private callback : DataExchangeAndroidCallback | null = null;
	@UTSJS.keepAlive
		constructor(callback : DataExchangeAndroidCallback) {
			super();
			this.callback = callback;
		}
	override onReceive(context : Context, intent : Intent) {
		this.callback?.(context, intent)
	}
}

export class DataExchangeDataPoster {
	/**
	 * 发送普通广播
	 */
	static post(name : string, data : Map<string, any>) : void {
		const context = UTSAndroid.getUniActivity()
		if (context != null) {
			var intent = new Intent(name);
			data.forEach((value : any, key : string, _map : Map<string, any>) => {
				intent.putExtra(key, value);
			})
			context.sendBroadcast(intent)
		} else {
			console.error("发送Broadcast失败，没有获取到context")
		}
	}
}